}
fib
fib <- 1
i <- 2
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib <- c(0, 1)
i <- 1
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
fib <- c(0, 1)
i <- 0
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib <- c(0, 1)
i <- 2
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
fib <- c(0, 1)
i <- 1
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
Names <- "John Andrew Thomas"
Names2 = strsplit(name,' ')[[1]]
paste(name2,'gmail.com',sep='@',collapse = ";")
i <- 1
fib <- c()
i <- 1
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
fib <- c(1)
i <- 1
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
fib <- c(1,2)
i <- 1
while (fib[i] < 4000000) {
fib <- c(fib, fib[i-1] + fib[i])
i <- i + 1
}
fib
fib = c(1,2)
i = 1
while (fib[i] < 4000000) {
fib = c(fib, fib[i-1] + fib[i])
i = i + 1
}
fib
fib = c(1,2)
c(fib,fib[0])
c(fib,fib[0]) + fib[1]
sum(fib[fib %% 2 == 0 & fib < 4000000])
x <- 0
y <- 1
fib <- c()
while (x < 4000000 & y < 4000000){
x <- x + y
y <- x + y
fib = c(fib, x, y)
}
fib
sum(fib[fib %% 2 == 0 & fib < 4000000])
x <- 0
y <- 1
fib <- c(1:15)
while (x < 4000000 & y < 4000000){
x <- x + y
y <- x + y
fib = c(fib, x, y)
}
fib
sum(fib[fib %% 2 == 0 & fib < 4000000])
x <- 0
y <- 1
fib <- c()
while (x < 4000000 & y < 4000000){
x <- x + y
y <- x + y
fib = c(fib, x, y)
}
fib
sum(fib[fib %% 2 == 0 & fib < 4000000])
x <- 0
y <- 1
fib <- c()
while (x < 4000000 & y < 4000000){
x <- x + y
y <- x + y
fib = c(x, y)
}
fib
x <- 0
y <- 1
fib <- c()
while (x < 4000000 & y < 4000000){
x <- x + y
y <- x + y
fib = c(fib, x, y)
}
fib
c(c(1,2),4,6)
c(c(0),1,3)
c(c(),1,3)
matrix(c(2,3,5,7)
matrix(c(2,3,5,7))
matrix(c(2,3,5,7),)
matrix(c(2,3,5,7),2)
nrow(matrix(c(2,3,5,7),2))
matrix(c(1,2,3,4),2) * c(1,2)
c(1,2) * matrix(c(1,2,3,4),2)
matrix[1,]
matrix(c(1,2,3,4),2)[1]
matrix(c(1,2,3,4),2)[1,]
matrix(c(1,2,3,4),2)[,1]
matrix(c(1,2,3,4),2)
matrix(c(1,2,3,4),2)[,1]
matrix(c(1,2,3,4),2)[,1]*c(1,2)
c(1,2) * matrix(c(1,2,3,4),2)
dim(matrix(c(1,2,3,4),2))
MAT = matrix(c(1,2,3,4),2)
MAT
MAT = matrix(c(1,2,3,4),2)
VEC = c(3,4)
MAT * VEC
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
MAT[i]*VEC[j]
}
}
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
return(MAT[i]*VEC[j])
}
}
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
MAT[i]*VEC[j]
}
}
MAT * VEC
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
MAT[i,j]*VEC[j]
}
}
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
cat(MAT[i,j]*VEC[j])
}
}
MAT[1,2]
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j]
}sum(X)
}
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j]
}
sum(X)
}
cat(sum(X))
MAT * VEC
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
}
Result = c()
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Reault = c(Result,X)
}
Result = c()
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Reault = c(Result,X)
}
}
Result
Result = c()
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Result = c(Result,X)
}
}
Result
MAT * VEC
matrix(Result,2)
Result = c()
X = 0
}
for(i in 1:nrow(MAT)){
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Result = c(Result,X)
}
}
matrix(Result,2)
MAT * VEC
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Result = c(Result,X)
}
}
matrix(Result,2)
MAT * VEC
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Result = c(Result,X)
}
}
matrix(Result,2)
X=0
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
Result = c(Result,X)
}
}
matrix(Result,2)
Result = c()
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
matrix(Result,2)
Result = c()
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
matrix(Result,2)
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
}Result = c(Result,X)
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
matrix(Result,2)
dim(matrix(c(1,2,3,4),2))
c
VEC = c(3,4)
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
matrix(Result,2)
MAT * VEC
MAT
VEC
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
matrix(Result,2)
Result
MAT = matrix(c(1,2,3,4),2)
VEC = c(3,4)
Result = c()
for(i in 1:nrow(MAT)){
X=0
for(j in 1:ncol(MAT)){
X = MAT[i,j]*VEC[j] + X
}
Result = c(Result,X)
}
Result
MAT*VEC
MAT%*%VEC
matrix(Result,2)
library(shiny)
install.packages('shiny')
library(shiny)
runExample('01_hello')
tanz %>% group_by(population,status_group) %>% summarise(count = n()) %>%
group_by(population) %>% mutate(perc = count/sum(count)) %>%
plot_ly(x = ~population, y = ~perc, color = ~status_group, type='bar') %>%
layout(barmode = 'stack', title = "Functionality by Extraction Type",
autosize = F, width = 1000, height = 500, margin = m, xaxis = list(title = ""), yaxis = list(title = ""))
shiny::runApp('C:/Users/Stephen/Desktop/git_proj/Visualization_Shiny_proj')
tanz %>% group_by(population,status_group) %>% summarise(count = n()) %>%
group_by(population) %>% mutate(perc = count/sum(count)) %>%
plot_ly(x = ~population, y = ~perc, color = ~status_group, type='bar') %>%
layout(barmode = 'stack', title = "Functionality by Extraction Type",
autosize = F, width = 1000, height = 500, margin = m, xaxis = list(title = ""), yaxis = list(title = ""))
tanz %>% group_by(population,status_group) %>% summarise(count = n()) %>%
group_by(population) %>% mutate(perc = count/sum(count)) %>%
plot_ly(x = ~population, y = ~perc, color = ~status_group, type='bar') %>%
layout(barmode = 'stack', title = "Functionality by Extraction Type"))
tanz %>% group_by(population,status_group) %>% summarise(count = n()) %>%
group_by(population) %>% mutate(perc = count/sum(count)) %>%
plot_ly(x = ~population, y = ~perc, color = ~status_group, type='bar') %>%
layout(barmode = 'stack', title = "Functionality by Extraction Type")
tanz_histo %>% plot_ly(alpha = 0.6) %>%
add_histogram(x = ~population, color = ~status_group) %>%
layout(barmode = "overlay", title = "Functionality by GPS Height")
tanz %>% group_by(region) %>% plot_ly(alpha = 0.6) %>%
add_histogram(x = ~population, color = ~status_group) %>%
layout(barmode = "overlay", title = "Functionality by GPS Height")
install.packages("devtools")
install.packages("devtools")
remove.packages("shinydashboard")
install_github(“peterolive/shinydashboard”)
library(devtools)
install_github(“peterolive/shinydashboard”)
library(devtools)
library(devtools)
library(devtools)
install_github(“peterolive/shinydashboard”)
library(shinydashboard)
library(googleVis)
library(shiny)
library(data.table)
library(dplyr)
library(shinythemes)
library(ggplot2)
library(shinydashboard)
library(plotly)
library(googleVis)
library(DT)
library(leaflet.extras)
library(leaflet)
library(devtools)
tanz = read.csv("./Pipe_ind.csv")
Pipe_labels = read.csv("./Pipe_labels.csv")
tanz = inner_join(tanz,Pipe_labels, by = "id")
#dataset for gps_height histo graph. excludes all 0 values
tanz_histo = tanz %>% filter(gps_height != 0)
#construction year
tanzconst = tanz %>% filter(construction_year > 0)
#map data
tanz_region = tanz %>% filter(longitude > 0, latitude < -1) %>% group_by(region, status_group)
map <- leaflet(tanz_region) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Non Functional"),
options = layersControlOptions(collapsed = FALSE)
)
tanz = read.csv("./Pipe_ind.csv")
setwd("C:/Users/Stephen/Desktop/git_proj")
setwd("C:/Users/Stephen/Desktop/git_proj/Visualization_Shiny_proj")
tanz = read.csv("./Pipe_ind.csv")
Pipe_labels = read.csv("./Pipe_labels.csv")
tanz = inner_join(tanz,Pipe_labels, by = "id")
#map data
tanz_region = tanz %>% filter(longitude > 0, latitude < -1) %>% group_by(region, status_group)
map <- leaflet(tanz_region) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Non Functional"),
options = layersControlOptions(collapsed = FALSE)
)
map
map <- leaflet(tanz_region) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Functional"),
options = layersControlOptions(collapsed = FALSE)
)
map
tanz_region$status_group
map_func_subset <- reactive({
if(input$checkbox == "Functional") {
tanz_region %>%
filter(status_group == "functional")
}else if(input$checkbox == "Non Functional") {
tanz_region %>%
filter(status_group == "non functional")
}else if(input$checkbox == "Functional Needs Repair"){
tanz_region %>%
filter(status_group == "functional needs repair")
}
})
map <- leaflet(tanz_region) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Functional"),
options = layersControlOptions(collapsed = FALSE)
)
map
tanz_region %>% filter(status_group == "functional")
tanzf = tanz_region %>% filter(status_group == "functional")
map <- leaflet(tanzf) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Functional"),
options = layersControlOptions(collapsed = FALSE)
)
map
map <- leaflet(tanzf) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "red") %>%
#addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'non functional',]") %>%
#addTiles(data = tanzfb) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Functional"),
options = layersControlOptions(collapsed = FALSE)
)
map
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
#addTiles(data = tanzfb) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
overlayGroups = c("Functional", "Non Functional"),
options = layersControlOptions(collapsed = FALSE)
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
map <- leaflet(tanzf) %>%
map <- leaflet(tanzf) %>%
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "blue") %>%
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
#addTiles(data = tanzfb) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "tanz_region[tanz_region$status_group == 'functional needs repair',]") %>%
# Layers control
addLayersControl(
overlayGroups = c("Functional", "Non Functional"),
options = layersControlOptions(collapsed = FALSE)
) %>%
map <- leaflet(tanzf) %>%
tanz_region$id
# Base groups
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "blue") %>%
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "blue") %>%
map <- leaflet(tanzf) %>%
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "blue")
map <- leaflet(tanzf) %>%
addTiles() %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Functional", fillColor = "blue") %>%
addTiles(data = tanzf) %>% addCircles(~longitude, ~latitude,, stroke = F, group = "Non Functional", fillColor = "red" %>%
addLayersControl(
overlayGroups = c("Functional", "Non Functional"),
options = layersControlOptions(collapsed = FALSE)
)
